from docx import Document
from docx.shared import Pt, Inches
from docx.enum.text import WD_ALIGN_PARAGRAPH, WD_BREAK
from docx.shared import RGBColor
from datetime import datetime
import os
import pandas as pd

def format_currency(amount, include_decimals=True):
    """Format number as currency string with optional decimal places."""
    try:
        if isinstance(amount, str):
            # Remove '$' and ',' from string before converting
            amount = float(amount.replace('$', '').replace(',', '').strip())
        if include_decimals:
            return f"${amount:,.2f}"
        return f"${amount:,.0f}"
    except (ValueError, TypeError):
        return "$0.00" if include_decimals else "$0"

def add_heading_with_format(doc, text, level=1, bold=True):
    """Add formatted heading to document."""
    heading = doc.add_heading(text, level=level)
    heading.runs[0].bold = bold
    return heading

def add_paragraph_with_format(doc, text, bold=False, italic=False, space_after=True):
    """Add formatted paragraph to document."""
    paragraph = doc.add_paragraph()
    run = paragraph.add_run(text)
    run.bold = bold
    run.italic = italic
    if space_after:
        paragraph.space_after = Pt(10)
    return paragraph

def get_primary_department(row):
    """Determine primary department based on Main Dept field."""
    return row['Main Dept']

def extract_department_number(business_unit):
    """Extract department number from business unit."""
    try:
        unit_str = str(business_unit).split('-')[0].strip()
        return int(''.join(filter(str.isdigit, unit_str)))
    except:
        return 0

def get_department_from_number(dept_num):
    """Convert department number to department name."""
    if 20 <= dept_num <= 29:
        return 'HVAC'
    elif 30 <= dept_num <= 39:
        return 'Plumbing'
    elif 40 <= dept_num <= 49:
        return 'Electric'
    return 'Unknown'

def get_tech_generated_leads(jobs_df, tgl_df, tech_name):
    """Get TGL details for a technician."""
    if tgl_df is None:
        return []
        
    tech_tgls = tgl_df[
        (tgl_df['Lead Generated By'] == tech_name) & 
        (tgl_df['Status'] != 'Canceled')
    ]
    
    tgl_details = []
    for _, tgl in tech_tgls.iterrows():
        job_number = tgl.get('Job #', 'N/A')
        # Find corresponding job in jobs_df
        job_info = jobs_df[jobs_df['Invoice #'].astype(str) == str(job_number)]
        amount = job_info['Jobs Total Revenue'].iloc[0] if not job_info.empty else 0
        
        tgl_details.append({
            'job_number': job_number,
            'amount': amount,
            'status': tgl['Status'],
            'created_date': tgl['Created Date']
        })
    
    return tgl_details

def get_invoice_details(jobs_df, tech_name, dept):
    """Get completed and sales invoice details for a department."""
    # Get department number range
    dept_start = {'HVAC': 20, 'Plumbing': 30, 'Electric': 40}[dept]
    dept_end = dept_start + 9
    
    # Filter for department
    dept_jobs = jobs_df[jobs_df['Business Unit'].apply(
        lambda x: dept_start <= extract_department_number(str(x)) <= dept_end
    )]
    
    # Get completed jobs (as primary tech)
    completed_jobs = dept_jobs[dept_jobs['Primary Technician'] == tech_name]
    completed_invoices = completed_jobs['Invoice #'].tolist()
    completed_revenues = completed_jobs['Jobs Total Revenue'].tolist()
    
    # Get sales (where sold but not primary tech)
    sales_jobs = dept_jobs[
        (dept_jobs['Sold By'] == tech_name) & 
        (dept_jobs['Primary Technician'] != tech_name)
    ]
    sales_invoices = sales_jobs['Invoice #'].tolist()
    sales_revenues = sales_jobs['Jobs Total Revenue'].tolist()
    
    return (completed_invoices, completed_revenues), (sales_invoices, sales_revenues)

def create_combined_commission_report(output_excel_path, output_doc_path):
    """
    Create a single Word document containing commission reports for all technicians.
    """
    # Read the Excel files
    df = pd.read_excel(output_excel_path)  # Commission data
    
    # Read combined data file
    combined_file = output_excel_path.replace('output.xlsx', 'combined_data.xlsx')
    jobs_df = pd.read_excel(combined_file, sheet_name='Sheet1')
    
    try:
        tgl_df = pd.read_excel(combined_file, sheet_name='Sheet1_TGL')
    except:
        tgl_df = None
        print("Warning: TGL sheet not found in combined data file")
    
    # Create new document
    doc = Document()
    
    # Set up document styling
    style = doc.styles['Normal']
    style.font.name = 'Times New Roman'
    style.font.size = Pt(8)
    
    # Add title page
    title_heading = add_heading_with_format(doc, "Commission Report Summary", level=0)
    title_heading.alignment = WD_ALIGN_PARAGRAPH.CENTER
    
    current_date = datetime.now().strftime('%m/%d/%y')
    date_para = doc.add_paragraph()
    date_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
    date_para.add_run(f"Week ending {current_date}").bold = True
    
    # Add page break after title
    doc.add_paragraph().add_run().add_break(WD_BREAK.PAGE)

    # Add intentionally blank page
    blank_para = doc.add_paragraph()
    blank_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
    for _ in range(10):
        doc.add_paragraph()
    blank_text = blank_para.add_run("This page intentionally left blank")
    blank_text.bold = True
    blank_text.font.size = Pt(14)
    
    # Add page break after blank page
    doc.add_paragraph().add_run().add_break(WD_BREAK.PAGE)
    
    # Process each technician
    for _, row in df.iterrows():
        # Header Section
        add_heading_with_format(doc, row['Technician'], level=1)
        
        # Revenue Section
        revenue_para = doc.add_paragraph()
        revenue_para.add_run("Revenue Summary\n").bold = True
        revenue_para.add_run(f"Department: {row['Main Dept']}\n")
        revenue_para.add_run(f"Total Revenue: {format_currency(row['Total Revenue'])}\n")
        revenue_para.add_run(f"Completed Job Revenue: {format_currency(row['Completed Job Revenue'])}\n")
        revenue_para.add_run(f"Tech-Sourced Install Sales: {format_currency(row['Tech-Sourced Install Sales'])}\n")
        
        # Get TGL information
        tgl_details = get_tech_generated_leads(jobs_df, tgl_df, row['Technician'])
        stats_para = doc.add_paragraph()
        stats_para.add_run(f"Found {len(tgl_details)} tech-generated lead(s)\n")
        if tgl_details:
            stats_para.add_run("Tech Generated Lead Details:\n")
            for tgl in tgl_details:
                invoice_num = str(tgl['job_number']).split('.')[0]
                stats_para.add_run(f"  Invoice {invoice_num}: {format_currency(tgl['amount'])} - {tgl['status']}\n")
        
        # Department Revenue Breakdown
        dept_para = doc.add_paragraph()
        dept_para.add_run("Department Revenue Breakdown\n").bold = True
        
        # HVAC Department
        if row['HVAC Total'] != "$0.00":
            (completed_invoices, completed_revenues), (sales_invoices, sales_revenues) = get_invoice_details(jobs_df, row['Technician'], 'HVAC')
            dept_para.add_run("HVAC Department:\n")
            dept_para.add_run(f"  Completed Revenue: {format_currency(row['HVAC Revenue'])} ({len(completed_invoices)} invoices)\n")
            if completed_invoices:
                for inv, rev in zip(completed_invoices, completed_revenues):
                    invoice_num = str(inv).split('.')[0]
                    dept_para.add_run(f"    Invoice {invoice_num}: {format_currency(rev)}\n")
            dept_para.add_run(f"  Sales: {format_currency(row['HVAC Sales'])} ({len(sales_invoices)} invoices)\n")
            if sales_invoices:
                for inv, rev in zip(sales_invoices, sales_revenues):
                    invoice_num = str(inv).split('.')[0]
                    dept_para.add_run(f"    Invoice {invoice_num}: {format_currency(rev)}\n")
            dept_para.add_run(f"  Spiffs: {format_currency(row['HVAC Spiffs'], include_decimals=True)}\n")
            dept_para.add_run(f"  Total: {format_currency(row['HVAC Total'])}\n")
            dept_para.add_run(f"  Commission: {format_currency(row['HVAC Commission'], include_decimals=True)}\n")
        
        # Plumbing Department
        if row['Plumbing Total'] != "$0.00":
            (completed_invoices, completed_revenues), (sales_invoices, sales_revenues) = get_invoice_details(jobs_df, row['Technician'], 'Plumbing')
            dept_para.add_run("Plumbing Department:\n")
            dept_para.add_run(f"  Completed Revenue: {format_currency(row['Plumbing Revenue'])} ({len(completed_invoices)} invoices)\n")
            if completed_invoices:
                for inv, rev in zip(completed_invoices, completed_revenues):
                    invoice_num = str(inv).split('.')[0]
                    dept_para.add_run(f"    Invoice {invoice_num}: {format_currency(rev)}\n")
            dept_para.add_run(f"  Sales: {format_currency(row['Plumbing Sales'])} ({len(sales_invoices)} invoices)\n")
            if sales_invoices:
                for inv, rev in zip(sales_invoices, sales_revenues):
                    invoice_num = str(inv).split('.')[0]
                    dept_para.add_run(f"    Invoice {invoice_num}: {format_currency(rev)}\n")
            dept_para.add_run(f"  Spiffs: {format_currency(row['Plumbing Spiffs'], include_decimals=True)}\n")
            dept_para.add_run(f"  Total: {format_currency(row['Plumbing Total'])}\n")
            dept_para.add_run(f"  Commission: {format_currency(row['Plumbing Commission'], include_decimals=True)}\n")
        
        # Electric Department
        if row['Electric Total'] != "$0.00":
            (completed_invoices, completed_revenues), (sales_invoices, sales_revenues) = get_invoice_details(jobs_df, row['Technician'], 'Electric')
            dept_para.add_run("Electric Department:\n")
            dept_para.add_run(f"  Completed Revenue: {format_currency(row['Electric Revenue'])} ({len(completed_invoices)} invoices)\n")
            if completed_invoices:
                for inv, rev in zip(completed_invoices, completed_revenues):
                    invoice_num = str(inv).split('.')[0]
                    dept_para.add_run(f"    Invoice {invoice_num}: {format_currency(rev)}\n")
            dept_para.add_run(f"  Sales: {format_currency(row['Electric Sales'])} ({len(sales_invoices)} invoices)\n")
            if sales_invoices:
                for inv, rev in zip(sales_invoices, sales_revenues):
                    invoice_num = str(inv).split('.')[0]
                    dept_para.add_run(f"    Invoice {invoice_num}: {format_currency(rev)}\n")
            dept_para.add_run(f"  Spiffs: {format_currency(row['Electric Spiffs'], include_decimals=True)}\n")
            dept_para.add_run(f"  Total: {format_currency(row['Electric Total'])}\n")
            dept_para.add_run(f"  Commission: {format_currency(row['Electric Commission'], include_decimals=True)}\n")
        
        # Performance Metrics
        metrics_para = doc.add_paragraph()
        metrics_para.add_run("Performance Metrics\n").bold = True
        metrics_para.add_run(f"Average ticket: {format_currency(row['Avg Ticket $'], include_decimals=True)}\n")
        metrics_para.add_run(f"Service Completion %: {row['Service Completion %']}%\n")
        metrics_para.add_run(f"Install Contribution %: {row['Install Contribution %']}%\n")
        
        # Threshold Adjustments
        adjustments_para = doc.add_paragraph()
        adjustments_para.add_run("Threshold Adjustments\n").bold = True
        if row['Excused Hours'] > 0:
            adjustments_para.add_run(f"Excused Hours: {row['Excused Hours']} hours\n")
        if row['TGL Threshold Reduction'] > 0:
            adjustments_para.add_run(f"TGL Threshold Reduction: {format_currency(row['TGL Threshold Reduction'], include_decimals=True)}\n")
        
        # Commission Thresholds
        thresholds_para = doc.add_paragraph()
        thresholds_para.add_run("Commission Thresholds\n").bold = True
        thresholds_para.add_run("Base Thresholds:\n")
        thresholds_para.add_run(f"{row['Base Threshold Scale']}\n")
        thresholds_para.add_run("Adjusted Thresholds:\n")
        thresholds_para.add_run(f"{row['Adjusted Threshold Scale']}\n")
        
        # Commission Calculations
        commission_para = doc.add_paragraph()
        commission_para.add_run("Commission Calculations\n").bold = True
        commission_para.add_run(f"Commissionable Revenue: {format_currency(row['Commissionable Revenue'])}\n")
        commission_para.add_run(f"Commission Rate: {row['Commission Rate %']}%\n")
        commission_para.add_run(f"Total Commission: {format_currency(row['Total Commission'], include_decimals=True)}\n")
        
        # Spiffs
        if row['Spiffs'] > 0:
            spiffs_para = doc.add_paragraph()
            spiffs_para.add_run("Spiffs\n").bold = True
            spiffs_para.add_run(f"Total Spiffs: {format_currency(row['Spiffs'], include_decimals=True)}\n")
        
        # Status
        status_para = doc.add_paragraph()
        status_para.add_run("Commission Status: ").bold = True
        status_para.add_run(f"{row['Status']}\n")
        
        # Add horizontal line and page break between technicians
        doc.add_paragraph('_' * 50)
        doc.add_paragraph().add_run().add_break(WD_BREAK.PAGE)
    
    # Save the document
    doc.save(output_doc_path)
    print(f"Created combined commission report: {output_doc_path}")

if __name__ == "__main__":
    # Paths
    output_excel = r'C:\Users\abatlouni\Downloads\output.xlsx'
    output_doc = r'C:\Users\abatlouni\Downloads\Combined_Commission_Report.docx'
    
    try:
        create_combined_commission_report(output_excel, output_doc)
        print("\nCommission report has been generated successfully!")
    except Exception as e:
        print(f"Error generating report: {str(e)}")